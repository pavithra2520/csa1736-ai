# from collections import deque
#
# class Graph:
#     def __init__(self):
#         self.adj_list = {}
#
#     def add_edge(self, u, v):
#         if u not in self.adj_list:
#             self.adj_list[u] = []
#         if v not in self.adj_list:
#             self.adj_list[v] = []
#         self.adj_list[u].append(v)
#         self.adj_list[v].append(u)
#
#     def bfs(self, start):
#         visited = {}
#         queue = deque([start])
#         level = {start: 0}
#
#         while queue:
#             node = queue.popleft()
#             print(f"Visited node: {node} at level {level[node]}")
#             visited[node] = True
#
#             for neighbor in self.adj_list[node]:
#                 if neighbor not in visited:
#                     queue.append(neighbor)
#                     visited[neighbor] = True
#                     level[neighbor] = level[node] + 1
#
# # Example usage:
# graph = Graph()
# graph.add_edge(0, 1)
# graph.add_edge(0, 2)
# graph.add_edge(1, 2)
# graph.add_edge(2, 3)
# graph.add_edge(3, 3)
#
# print("Breadth First Traversal starting from vertex 2:")
# graph.bfs(2)

class VaccumCleaner:
    def init(self, position="A"):
        self.position = position

    def move_to(self, new_position):
        self.position = new_position
        print(f"Vaccum cleaner moved to position {self.position}")

    def clean(self):
        print(f"Cleaning at position {self.position}")

    def run(self, actions):
        for action in actions:
            if action == "MoveA":
                self.move_to("A")
            elif action == "MoveB":
                self.move_to("B")
            elif action == "Clean":
                self.clean()
            else:
                print(f"Invalid action: {action}")


actions = ["MoveA", "Clean", "MoveB", "Clean"]
vaccum = VaccumCleaner()

print("Starting vacuum cleaner simulation...")
vaccum.run(actions)
